source ${HOME}/bin/_common.zsh

tscr "${HOME}/.aliases.local"

# --- Paths / Globals

alias -g ddw='"$HOME/Downloads"'
alias -g ddc='"$HOME/Documents"'
alias -g dpr='"$HOME/Projects"'
alias -g ddd='"$HOME/Library/Developer/Xcode/DerivedData/"'

alias -g X="| xargs"
alias -g X0="| xargs -0"
alias -g XG="| xargs -0 grep -E"
alias -g CDL="| colordiff | less"
alias -g PBC="| pbcopy"
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep -E'
alias -g GI='| grep -Ei'
alias -g L="| less"
alias -g LL="2>&1 | less"
# alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g SU="| sort | uniq"
alias -g XCB="| xcbeautify -q --disable-logging"

# --- System

flush_dns() {
  sudo killall -HUP mDNSResponder
  sudo killall mDNSResponderHelper
  sudo dscacheutil -flushcache
}

notify() {
  if /usr/bin/which -s noti ; then
    _exec noti "$*"
  else
    _exec "$*"
  fi
}

cz() {
  chezmoi $*
}

alias '??'="source \"$HOME/.local/share/mise/installs/pipx-clipea-cli/latest/bin/clipea\""

alias ced="cz edit --apply"
alias cap="cz apply"
alias cad="cz add"
alias cra="cz re-add"
alias cup="open ~/bin/update_chezmoi.terminal"
alias cma="cz merge-all"
alias cfo="cz forget"

alias hyf="hyperfine -m 3"

alias src='source ~/.zshrc'
alias alg='alias | grep'

alias ez="eza --group-directories-first --icons=auto --smart-group --git -h"
alias e="ez -1"
alias el="ez -l"
alias ea="el -a"
unalias l ll la 2> /dev/null
alias l=e ll=el la=ea
alias lt="l -s modified -r"
alias llt="ll -m -s modified -r"

alias cal="gcal -s 1"

alias proxyman-cli=/Applications/Setapp/Proxyman.app/Contents/MacOS/proxyman-cli

br() {
  brew $*
}

brup() {
  if [[ -z "$1" ]]; then
    br update
  else
    br upgrade $*
  fi
}

alias brs="br search"
alias brfo="br info"
alias brls="br list"
alias brin="br install"
alias brinc="br install --cask"
alias brun="br uninstall"
alias brunc="br uninstall --cask"

alias lsg="lsof | grep -i"
alias lsig="lsof -i | grep -i"
alias psg="ps aux | grep -i"
# alias top="glances --process-short-name"
alias dfh="dfc -blw"
alias duh="du -csh"
alias du="du -h"

x86() {
  arch -x86_64 "$@"
}

alias m=make
alias j=just

o() {
  if [[ -z "$1" ]]; then
    open .
  else
    open $*
  fi
}

alias xdq="xattr -d com.apple.quarantine"
alias xf="xmllint --format"

alias v=vim
alias g=gvim
gvim() {
  vimer -t $*
}

c() {
  if [[ -z "$1" ]]; then
    code-insiders .
  else
    code-insiders $*
  fi
}

z() {
  if [[ -z "$1" ]]; then
    zed .
  else
    zed $*
  fi
}

alias diff=colordiff


alias diff=colordiff
alias diffstat="diffstat -f3 -C"

cat() {
  type glow >/dev/null 2>&1
  has_glow=$?

  if [[ $has_glow && -z "$2" && "$1:t:e" == "md" ]]; then
    glow -p $1
  else
    bat $*
  fi
}

cata() {
  cat --style=header $*
}

clear_ascii() {
  cat $* | sed -E "s/"$'\E'"\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g"
}

dm() {
  if [[ -d /Applications/Dash.app || /Applications/SetApp/Dash.app ]]; then
    url=$(printf %s "manpages:$1"|jq -sRr @uri)
    open "dash://${url}"
  else
    /usr/bin/man $*
  fi
}

man() {
  tldr $* || dm $*
}

# --- zsh

_shell_init_files=${HOME}/{bin/_common.zsh,.{zshenv,zprofile,zshrc,aliases,zimrc},.config/{Brewfile,bonkey.omp.json,mise/config.toml}}
cvz() {
  ced $(eval "echo $_shell_init_files")
  source ${HOME}/.zshrc
}

cvzl() {
  $EDITOR $(eval "echo $_shell_init_files")
  source ${HOME}/.zshrc
}

# --- Network

alias h="http"
alias hv="h -v"
alias hf="h --follow"
alias hvf="hv --follow"

alias curl="curlie"

cj() {
  curl -s -L $* | jq .
}


hj() {
  local u f
  u=$1
  f=$2
  test -z "$1" -o -z "$2" && echo "usage: $0 <url> <file>" && return
  h "$u" | jq . > $f
  echo "File '$f' saved."
}

alias mtr="sudo mtr"
alias p1="ping 1.1.1.1"
alias m1="mtr 1.1.1.1"
alias m8="mtr 8.8.8.8"
alias mg="mtr google.com"

ping() {
  if type gping 2>&1 > /dev/null ; then
    gping -s -b 10 --vertical-margin 5 --horizontal-margin 10 $*
  else
    /sbin/ping $*
  fi
}

alias host=doggo
alias dig=doggo

# --- LLM

lgf() {
  llmm gemini-2.0-flash $*
}

lgp() {
  llmm gemini-2.0-pro-exp-02-05 $*
}

lgt() {
  llmm gemini-2.0-flash-thinking-exp-01-21 $*
}

lgl() {
  llmm gemini-2.0-flash-lite $*
}

llmm() {
  llm -m $*
}


# --- Search

f() { fd --follow $* }
f0() { f $* --print0 }

ff() { f --type f $* }
ff0() { f0 --type f $* }

alias fda="fd -HI"

alias ag='ag --color-path "3;32" --color-line-number "0;36" --color-match "1;31;40"'
alias agw="ag -w"
alias aga="ag -u"
alias agh="ag -U --hidden"
alias agl="ag -l"


agz() {
  ag $* $_shell_init_files
}

ags() {
  ag --ignore=Carthage --ignore=Pods --ignore=\*.framework --objc --objcpp --swift $*
}

agsw() {
  ags -w $*
}

agst() {
  agsw " *(protocol|actor|struct|typealias|class) +$1"
}

agc() {
  ag -c $* | awk -F: 'BEGIN { c = 0} { c += $2 } END { print "found:", c}'
}

# --- Node / nvm

nvm-init() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

# --- Media

unalias gm 2> /dev/null

img_diff() {
  img1=$1
  img2=$2
  dst="diff_${img1}-${img2}.png"

  _exec "compare -verbose -density 300 '$img1' '$img2' -compose src '$dst'"
}

montage() {
  tile=$1
  [[ -z "$3" ]] && echo "montage <XxY> <file...> <output_file>" && return
  shift
  gm montage +frame +shadow +label -tile $tile -geometry +1+1 $*
}

ff_silent_sound() {
  for i in $* ; do
    dst=${i:r}-nosound.${i:e}
    echo ffmpeg -i "$i" -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -shortest -c:v copy -c:a aac $dst
  done
}

ff_m4v() {
  ff_format m4v $*
}

ff_webm() {
  ff_format webm $*
}

ff_format() {
  local i
  emulate -L zsh
  format=$1
  shift

  if [[ -z "$1" ]]; then
    log_error "Please provide output format file extension (e.g. 'webm') and files to convert"
    return 1
  fi

  for i in $* ; do
    ffmpeg -y -i "$i" "${i:r}.${format}" && rm -f "$i"
  done
}


ff_fps() {
  local i
  fps=$1 ; shift
  for i in $* ; do
    dst=${i:r}-fps${fps}.${i:e}
    ffmpeg -i "$i" -r $fps -qscale 0 $dst
  done
}

ff_trim() {
  emulate -L zsh

  help="Help: $0 <input_movie> <output_movie> <start> <length>"

  test -z "$1" && echo "${help}" && return 1
  test -z "$2" && echo "No OUTPUT given. ${help}" && return 2
  test -z "$3" && echo "No START given. ${help}" && return 3
  test -z "$4" && echo "No LENGTH given. ${help}" && return 4

  in=$1
  out=$2
  ine=${in:e}
  outn=${out:r}
  start=$3
  len=$4

  ffmpeg -i "${in}" -codec copy -y -ss $start -t $len "${outn}.${ine}"
}

ff_gif() {
  input=$1
  output="${input:r}.gif"

  fps=${2:-10}
  width=${3:-600}
  height=${4:--1}
  ffmpeg -i "$input" -filter_complex "[0:v] fps=${fps},scale=w=${width}:h=${height},split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1" -f gif -y -hide_banner "${output}"
}

# --- iOS

alias bef="bue fastlane"

alias xcs="xcodes select"
xcs15() { xcs '15.4' }
xcs16() { xcs '16.2' }

alias xcsv="xcrun xcodebuild -version | head -1 | sed 's/.*Xcode \(.*\)/\1/'"
alias xcss="xcodes installed | grep Selected"

alias xcsc="xcrun simctl"
alias xcscl="xcsc list devices"
alias xcscld="xcscl devices"
alias xcsclr="xcscl runtimes"
alias xcscb="xcsc list|grep boot -i"

alias xcsclog="xcrun simctl spawn booted log stream --color always --debug --style compact"

xcsclogg() {
  xcsclog --predicate "$1"
}

xcsclogge() {
  xcsclog "eventMessage contains '$1'"
}

xck() {
  _exec "pkill -9 Xcode"
}

xcresolve() {
  proj=$1
  test -n "$proj" && shift
  scheme=$1
  test -n "$scheme" && shift

  if [[ ! -d $proj ]]; then
    echo "$proj not found"
    return
  fi

  if [[ "$proj" == *.xcworkspace ]]; then
    arg="-workspace"
    if [[ -z "$scheme" ]]; then
      scheme=$(basename $proj .xcworkspace)
    fi
  else
    arg="-project"
    if [[ -z "$scheme" ]]; then
      scheme=$(basename $proj .xcodeproj)
    fi
  fi

  xck
  _exec "find $proj -name Package.resolved -delete"
  _exec "xcrun xcodebuild -destination 'generic/platform=iOS' clean $arg $proj -scheme $scheme XCB"
  _exec "xcrun xcodebuild -destination 'generic/platform=iOS' -resolvePackageDependencies $arg $proj -scheme $scheme XCB"
}

xcb() {
  proj=$1
  test -n "$proj" && shift
  scheme=$1
  test -n "$scheme" && shift

  if [[ ! -d $proj ]]; then
    echo "$proj not found"
    return
  fi

  if [[ "$proj" == *.xcworkspace ]]; then
    arg="-workspace"
    if [[ -z "$scheme" ]]; then
      scheme=$(basename $proj .xcworkspace)
    fi
  else
    arg="-project"
    if [[ -z "$scheme" ]]; then
      scheme=$(basename $proj .xcodeproj)
    fi
  fi

  _exec "xcrun xcodebuild $arg $proj -scheme $scheme -destination 'generic/platform=iOS' $@ XCB"
}

xcreset() {
  xck

  _exec "rm -rf \"$HOME/Library/org.swift.swiftpm\""
  _exec "fd -t d remotes '$HOME/Library/Caches/org.swift.swiftpm' -x rm -rf"
  _exec "fd -t d --full-path 'SourcePackages/repositories/.*/remotes$' '$HOME/Library/Developer/Xcode/DerivedData/' -x rm -rf"
}

ticket_from_branch() {
  local BRANCH TICKET
  BRANCH=$(git symbolic-ref --short HEAD)
  (echo $BRANCH | grep -q "/") || return
  TICKET=$(echo $BRANCH | sed -E 's#.*/([A-Z]+-[0-9]+)[^/]*#\1#')
  [[ -z "$TICKET" ]] && return
  echo $TICKET
}

find_xcode_proj() {
  local xcode_proj

  if [[ -e "$1" ]]; then
    xcode_proj=$1
  else
    projects=(*.{xcworkspace,xcodeproj}(N) Package.swift(N))
    xcode_proj=$projects[1]
  fi

  test -z "$xcode_proj" && echo "No xcworkspace/xcodeproj file provider, nor found in the current directory." && return 1
  echo $xcode_proj
}

alias xc > /dev/null && unalias xc
xc() {
  local xcode_proj xcode

  xcode_proj=$(find_xcode_proj "$1")
  [ $? -ne 0 ] && echo "$xcode_proj" && return

  if [[ -f .xcode-version ]]; then
    xcode_version=$(cat .xcode-version)
    (xcrun xcodebuild -version | head -1 | grep -q ${xcode_version}) || \
      (echo "Selecting Xcode ${xcode_version}..." && xcversion select $xcode_version)
  fi
  xcode="$(xcode-select -p)"
  xcode="${xcode:s/\/Contents\/Developer/}"
  echo "Opening ${xcode_proj} with ${xcode} ($fg_bold[green]$(xcsv)${reset_color})"

  open -a "$xcode" "${xcode_proj}"
}

xco() {
  dir=$1
  project=$2

  if [[ ! -e $project ]]; then
    cd $dir
  fi

  log_message "Dir: $(pwd)"

  xc $project
}

_pod() {
  if [[ -f "Gemfile" || -f "../Gemfile" ]]; then
    _exec "bundle check || bundle install"
    _exec "bundle exec pod $@"
  else
    _exec "pod $@"
  fi
}

alias poi="_pod install"
alias poir="_pod install --repo-update"
alias pou="_pod update"
alias poun="_pod update --no-repo-update"
alias poo="_pod outdated"
alias pos="_pod search"

# --- git

alias gf > /dev/null && unalias gf
gf() {
  fork .
}

gl-pr-changelog() {
  git log --pretty='format:* %s' $* | sd '[A-Z]{3,}-[0-9]+: ' ''
}

alias gip="gitup"
alias rc="retcon"

alias gbc=better-commits

alias gl="git pull --autostash"
alias gd="git diff"
alias gdn="gd --names-only"
alias gst="git status"

alias gco="git checkout"
alias gcd="gco develop"
alias gcm="gco main"

gdm() {
    git add .
    git diff --cached $* | llm -m gemini-2.0-flash -s 'create one-liner commit message from the changes, use gitmoji'
}

gbf() {
  test -z "$1" && echo "Provide feature/XXX suffix" && return
  git checkout -b "feature/$1"
}

alias gl1m="git lg --merges"
alias gl1="git lg --no-merges"

alias gcl="git clone --recurse-submodules --progress"

alias gds="gd --stat"
alias gdn="gd --name-only"

alias gdt="git difftool"
alias gdtd="git difftool main"
alias gdtd="git difftool develop"

alias gcam="git commit -am"
alias gls="git ls-files"
alias glsm="gls -m"
alias gpo="gpu origin"

git-merged-show() {
  git branch --merged develop|tr -d ' '| grep -vE '^(develop|master|main)$'
}

unalias gpu 2> /dev/null
gpu() {
  test -z "$1" && echo "$0 <remote_name>" && return
  git push -u $1 $(git name-rev --name-only HEAD)
}

git-retrigger-checks() {
  git commit -m "Retrigger checks" --allow-empty && git push
}

ghd() {
  gh dash $*
}

ghprs() {
  gh pr list --state all --search $*
}

ghprv() {
  gh pr view $*
}

ghprco() {
  gh pr checkout $*
}

ghprcr() {
  gh pr create $*
}

ghprdr() {
  ghprc --draft --fill $*
}

git_pull_and_back() {
  local merging_branch stashed

  type ghf 2>&1 > /dev/null && ghf

  if [[ -z "$1" ]]; then
    echo "Please provide branch in git_pull_and_back"
    exit 1
  fi
  merging_branch=$1; shift

  stashed=$(git stash --include-untracked)
  echo "STASH: $stashed"

  cmd="git checkout $merging_branch && \
    git pull && \
    git checkout - && \
    $*"
  echo "CMD: $cmd"
  _exec $cmd
  # eval $cmd

  [[ $stashed != "No local changes to save" ]] && git stash pop

  type ghu 2>&1 > /dev/null && ghu
}

gpm() {
  src_branch=${1:-main}
  git_pull_and_back $src_branch "git merge --no-edit $src_branch"
}

gpr() {
  src_branch=${1:-main}
  git_pull_and_back $src_branch "git rebase $src_branch"
}

gicpa() {
  git add -A .

  if [[ -n "$1" ]]; then
    msg=$1
  else
    msg="Changed $(git diff --cached --name-only | uniq | tr '\n' ' ')"
  fi

  gcam "$msg" && git pull && git push
}

# -- Ruby

bu() {
  _exec "bundle $@"
}

buc() {
  _exec "bundle check || bundle install"
  bu $@
}

alias bue="buc exec"
alias buu="bu update"
alias buo="bu outdated"
alias bui="bu install"

# -- Jira

jira-ticket-in-branch() {
  local git_branch
  git_branch=$(git symbolic-ref --short HEAD 2> /dev/null)
  (echo $git_branch | grep -qE "[A-Z]{3,}-[0-9]+") || return
  echo $git_branch | sd '.*?([A-Z]{3,}-[0-9]+).*' '$1'
}

jira-ticket-summary() {
  local ticket summary
  ticket=$(jira-ticket-in-branch)
  if [[ -n "${ticket}" ]]; then
    # --verify='' to skip SSL errors with Netskope
    summary=$(http --verify='' GET "${JIRA_SERVER}/rest/api/3/issue/${ticket}" --auth "${JIRA_USER}:${JIRA_API_TOKEN}" | jq -r '.fields.summary')
    echo "${ticket}: ${summary}"
  else
    echo "No jira ticket found."
  fi
}

jira-extract-tickets() {
  local i
  for i in $* ; do
    echo "$i" | grep -E '[A-Z0-9]+[0-9]+' | sd '([A-Z0-9]+-[0-9]+)' '>>>>>$1<<<<<'|sd '.*>>>>>' '' | sd '<<<<<.*' ''
  done | sort -u
}

_git-branches-in-jira() {
  jira ls -q "key in ($(jira-extract-tickets $* | sd '\n' ' '|xargs|tr ' ' ','))"
}

git-branches-in-jira-all() {
  _git-branches-in-jira $(git branch)
}

git-branches-in-jira-merged() {
  _git-branches-in-jira $(git-merged-show)
}

# vim:set ft=zsh:
