if [[ $ZSH_DEBUGRC == true ]]; then
  zmodload zsh/zprof
fi

source ${HOME}/bin/_common.zsh

zstyle ':autocomplete:tab:*' fzf yes
zstyle ':autocomplete:tab:*' insert-unambiguous yes
zstyle ':autocomplete:*complete*:*' insert-unambiguous yes
zstyle ':autocomplete:*history*:*' insert-unambiguous yes
zstyle ':autocomplete:menu-search:*' insert-unambiguous yes

fpath=(/opt/homebrew/share/zsh/site-functions $fpath)
typeset -gU cdpath fpath path

#### ZIM START
zstyle ':zim:zmodule' use 'degit'

# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

# Initialize modules.
source ${ZIM_HOME}/init.zsh

#### ZIM END

# For zmodule wfxr/forgit
export PATH="$FORGIT_INSTALL_DIR/bin:$PATH"

# search history with arrow keys and text prefix
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

after_zvm() {
  bindkey '^r' _atuin_search_widget
  bindkey '^[[1;5D' backward-word # ctrl+left-arrow
  bindkey '^[[1;5C' forward-word # ctrl+right-arrow
}
zvm_after_init_commands+=(after_zvm)

_eval_for_cmd_cached fzf "fzf --zsh"
_eval_for_cmd_cached dyff "dyff completion zsh"
_eval_for_cmd_cached oh-my-posh "oh-my-posh init zsh --config ~/.config/bonkey.omp.json"

tsrc "${HOME}/.iterm2_shell_integration.zsh" \
    "${HOME}/.aliases.local" \
    "${HOME}/.aliases"

if [[ $ZSH_DEBUGRC == true ]]; then
  zprof
fi

# vim:set ft=zsh:

. "$HOME/.atuin/bin/env"

eval "$(atuin init zsh)"
